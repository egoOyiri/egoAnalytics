cmdhistory=["(hello \\"Betty\\")" "(hello \\"Me\\")" "(foo \\"t\\")" "(hello \\"me\\")" "(hello 't')" "(use '(akka-clojure core))\\n\\n(let [a (actor \#(println \\"Received \\" %))]\\n     (\! a \\"hello\\"))" "(let [a (actor\\n          (with-state [count 0]\\n        (fn [msg]\\n              (println count)\\n              (inc count))))]\\n  (\! a \\"hi\\")\\n  (\! a \\"hi\\"))" "(defn supervisor [msg]\\n      (let [child (actor (fn [msg] (println msg)))]\\n           (\! child msg)))\\n\\n(let [s (actor supervisor)]\\n     (\! s \\"hello\\"))" "(use '(akka-clojure core))" "actor" "(def url \\"http\://www.quandl.com/api/v1/datasets/BITCOIN/MTGOXUSD.csv?&trim_start\=2010-07-01&trim_end\=2013-07-01&sort_order\=asc\\")\\n(def btc (read-dataset url \:header true))" "(def url \\"http\://www.quandl.com/api/v1/datasets/BITCOIN/MTGOXUSD.csv?&trim_start\=2010-07-01&trim_end\=2013-07-01&sort_order\=asc\\")" "(def btc (read-dataset url \:header true))" "(def url \\"http\://www.quandl.com/api/v1/datasets/BITCOIN/MTGOXUSD.csv?&trim_start\=2010-07-01&trim_end\=2013-07-01&sort_order\=asc\\")" "(def btc (read-dataset url \:header true))" "(def url \\"http\://www.quandl.com/api/v1/datasets/BITCOIN/MTGOXUSD.csv?&trim_start\=2010-07-01&trim_end\=2013-07-01&sort_order\=asc\\")" "(def btc (read-dataset url \:header true))" "(def btc-z (zoo btc \:Date))" "(def btc-r (log-return btc-z \:Close))" "(view btc-r)" "(def url \\"http\://www.quandl.com/api/v1/datasets/BITCOIN/MTGOXUSD.csv?&trim_start\=2010-07-01&trim_end\=2013-07-01&sort_order\=asc\\")" "(def btc (read-dataset url \:header true))" "(def btc-z (zoo btc \:Date))" "(def btc-r (log-return btc-z \:Close))" "(view btc-r)" "(def btc-lr ($ \:Close btc-r))\\n(mean btc-lr) ;; 0.006929153189399101\\n(variance btc-lr) ;; 0.005812258211367765\\n(sd btc-lr) ;; 0.07623816768107537\\n(skewness btc-lr) ;; -0.04491679240743672\\n(kurtosis btc-lr) ;; 392704.64840013976 Looks very wrong" "(use '(akka-clojure core))\\n\\n(let [a (actor \#(println \\"Received \\" %))]\\n     (\! a \\"hello\\"))" "(use '(akka-clojure akka))" "(let [a (actor \#(println \\"Received \\" %))]\\n     (\! a \\"hello\\"))" "(let [a (actor\\n          (with-state [count 0]\\n        (fn [msg]\\n              (println count)\\n              (inc count))))]\\n  (\! a \\"hi\\")\\n  (\! a \\"hi\\"))" "(let [a (actor \#(println \\"Received \\" %))]\\n     (\! a \\"hello\\"))" "(let [a (akka/actor \#(println \\"Received \\" %))]\\n     (\! a \\"hello\\"))" "(let [a (akka-clojure.akka/actor \#(println \\"Received \\" %))]\\n     (\! a \\"hello\\"))" "(use '(akka-clojure akka-clojure.akka))" "(let [a (actor \#(println \\"Received \\" %))]\\n     (\! a \\"hello\\"))" "(let [a (`User/actor \#(println \\"Received \\" %))]\\n     (\! a \\"hello\\"))" "(let [a (\:akka/actor \#(println \\"Received \\" %))]\\n     (\! a \\"hello\\"))" "(let [a (\:akka/actor \#(println \\"Received \\" %))]\\n     (\:akka/\! a \\"hello\\"))" "(let [a (\:akka/actor \#(println \\"Received \\" %))]\\n        (\:akka/\! a \\"hello\\"))" "(let [a (Akka/actor \#(println \\"Received \\" %))]\\n        (Akka/\! a \\"hello\\"))" "(let [a (\:akka/actor \#(println \\"Received \\" %))]\\n        (\:akka/\! a \\"hello\\"))" "(let [a (\:akka/actor \#(println \\"Received \\" %))]\\n        (\! a \\"hello\\"))" "(let [a (\:akka/actor \#(println \\"Received \\" %))]\\n        (\:akka\! a \\"hello\\"))" "(let [a (actor \#(println \\"Received \\" %))]\\n     (\! a \\"hello\\"))" "(let [a (\:akka/actor \#(println \\"Received \\" %))]\\n     (\:akka/\! a \\"hello\\"))" "(let [a (\:akka/actor \#(println \\"Received \\" %))]\\n        (\:akka\! a \\"hello\\"))" "(view btc-r)" "(let [a (actor \#(println \\"Received \\" %))]\\n        (\! a \\"hello\\"))" "(let [a (\:akka/actor \#(println \\"Received \\" %))]\\n        (\:akka\! a \\"hello\\"))" "(view btc-r)" "view btc-r" "(view btc-r)"]
eclipse.preferences.version=1
